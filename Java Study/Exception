Exceptions
  -	Error conditions in Java.
  -	Java mechanisms for handling exceptions are the try-catch-finally construct and the throws keyword.
  -	Exception handling.
    o	Run-time: occur when your code is syntactically correct, but unexpected issue occurs while running the application
    o	Compile-time: must be fixed before you can compile and run your application.
  -	Exception is short for “exceptional event.
    o	An exceptional event which occurs in the normal execution of a program that disrupts the normal flow of the program’s instructions.

  -	Catch or Specify Requirement
    o	catching – you have written code to ry to recover from the error or to simply report that the error ocurred
    o	Specifying – Marking your code to indicate that it may cause this error. You are not trying to recover – but simply throws the error and 
    lets the calling code try to handle it.

  -	Exception Types
    o	Checked : Subject to the “catch or specify” requirement.
    o	Unchecked : not subject to the “catch or specify” requirement.
      	Errors: abnormal conditions fro mwhich most program should not attempt to recover.
      	runtime exception
    o	Anything that extends Exception is checked exception and anything that extends Runtime Exception is and unchecked exception.
    o	RuntimeException extends Exception
    o	Both Exception and Error extend Throwable
    o	Throwable extends Object

Handling Exception
  -	try-catch-finally 
  -	Try Block : Must be surround the code that might cause the exception. This block can contain lines of code that might cause different exception types.
  -	Catch Block: Each try block must be accompanied by at least one catch block. Contains code that either attempts to recover from the exception or simple reports the error.
  -	Finally Block: Option. Always run after try-catch combination.
  -	Use multi catch by using “|” keyword

Throw Exception (Specifying)
  -	If you decide that your code should not attempt to catch the exception, you must then specify your code can cause those exception,. 
  Simple add the throws keyword followed by a comma-delimited list of exception types that could be thrown to the method definition.

Exception Translation and Encapsulation
  -	Technique in helping us maintain well-encapsulated classes and application layers.
  -	leaky abstraction: the implementaion details leak out to the caller through the implementation-specific exceptions.

Try-with-resources
  -	A try statement that declares one or more resources. The resource is as an object that mush be closed after finished the program. 
  The try-with-resources statement ensures that each resource is closed at the end of the statement execution.
  -	Need to implements java.lang.AutoCloseable
  -	try(FileInputStream fis = new FileInputStream(“file.txt”){
           ….
    }catch(IOException e){
            …
    }
  o	This will automatically call close() method. 

User defined Exception
  -	Mostly implements Exception or RuntimeException
  -	Usually make 2 constructors. (one without any parameter, and one with String parameter)
Get exception information
  -	getmessage() – display only exception message
  -	printStackTrac() -  display the name of the exception and the nature of the message and line number where an exception has occurred

예외란? (Error vs. Exception)
  -	오류는 시스템에 비정상적인 상황이 생겼을 때 발생한다. 이는 시스템 레벨에서 발생하기 때문에 심각한 수준의 오류이고 개발자가 미리 예측을 할 수 없기 때문에 처리를 신경쓰지 않아도 된다.
  -	예외는 개발자가 구현한 로직에서 발생한다. 즉 상황을 미리 예측하여 처리 할 수 있다.

예외 클래스
  -	모든 예외 클래스는 Throwable 클래스를 상속받고 있으며 Throwable 클래스는 최상위 클래스 Object의 자식 클래스이다.
  -	Trhowable 을 상속받는 클래스는 Error 와 Exception이 있다.
  -	Exception은 수많은 자식 클래스를 가지고 있는대 그중 RuntimeException과 그의 자식클래스들만이 UncheckedException 이라 한다.

Checked Exception 과 Unchecked Exception
  -	Checked Exception은 반드시 예외를 처리해야 하고 확인 시점이 컴파일 단계에서 발생한다. 발생할 가능성이 있는 메소드 라면 반드시 try/catch 로 감싸거나 throw로 던져서 처리해야 한다.
  -	Unchecked Exception은 명시적인 처리를 하지 않아도 된다. 이 예외는 피할 수 있지만 개발자가 부주의해서 발생하는 경우가 대부분이고, 미리 예측하지 못했던 상황에서 발생ㅎ나는 예외가 아니기 때문에 굳이 로직으로 처리를 할 필요가 없다. (예. NullpointerException, IllegalArgumentException, IndexOutofBoundException…etc)
  -	일반적으로 컴파일 단계에서 명확하게 Exception 체크가 가능한 것을 Checked Exception, 실행과정 중 어떠한 특정 논리에 의해 발견되는 Exception을 Unchecked Exception이라 한다.

예외 처리 방법
  1)	예외 복구 (다른 작업 으름으로 유도)
    a.	핵심은 얘외가 발생하여도 애플리케이션은 정상적인 흐름으로 진행된다는 것. 
  2)	예외처리 회피 (처리하지 않고 호출할 쪽으로 throw)
    a.	throws를 통해 호출한쪽으로 예외를 던지고 그 처리를 회피하는 것. 호출한 쪽에서 다시 예외를 받아 처리하도록 하거나, 해당 베소드에서 이 예외를 던지는 것이 최선의 방법이라는 확신이 있을 때만 사용해야 한다.
  3)	예외 전환 (명확한 의미의 예외로 전환 후 throw)
    a.	예외를 잡아서 다른 예외를 던지는것
